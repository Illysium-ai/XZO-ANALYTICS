-- Snowflake Stored Procedure for smart_save_forecast
-- Target Schema: APOLLO_WILLIAMGRANT.FORECAST


CREATE OR REPLACE PROCEDURE FORECAST.SP_SMART_SAVE_FORECAST(
    P_MARKET_NAME VARCHAR,
    P_MARKET_CODE VARCHAR,
    P_DISTRIBUTOR_NAME VARCHAR,
    P_DISTRIBUTOR_ID VARCHAR,
    P_BRAND VARCHAR,
    P_BRAND_ID VARCHAR,
    P_VARIANT VARCHAR,
    P_VARIANT_ID VARCHAR,
    P_VARIANT_SIZE_PACK_DESC VARCHAR,
    P_VARIANT_SIZE_PACK_ID VARCHAR,
    P_FORECAST_YEAR INTEGER,
    P_MONTH INTEGER,
    P_FORECAST_METHOD VARCHAR,
    P_FORECAST_GENERATION_MONTH_DATE DATE,
    P_MANUAL_CASE_EQUIVALENT_VOLUME NUMBER,
    P_USER_ID VARCHAR,
    P_FORECAST_STATUS VARCHAR,
    P_COMMENT VARCHAR DEFAULT NULL
)
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
DECLARE
    -- Exception
    forecast_published_ex EXCEPTION (-20061, 'Cannot update forecast that has been published.');
    
    -- Variables
    V_FORECAST_ID INTEGER;
    V_EXISTS BOOLEAN;
BEGIN
    -- Check if this forecast's market has been published, using the new standard UDF.
    IF (FORECAST.UDF_IS_DEPLETIONS_FORECAST_PUBLISHED(:P_MARKET_CODE, :P_FORECAST_GENERATION_MONTH_DATE)) THEN
        RAISE forecast_published_ex;
    END IF;

    BEGIN TRANSACTION;

    BEGIN
        -- Check if a record with these business keys already exists
        SELECT ID, TRUE INTO :V_FORECAST_ID, :V_EXISTS
        FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST
        WHERE MARKET_CODE = :P_MARKET_CODE
          AND DISTRIBUTOR_ID = :P_DISTRIBUTOR_ID
          AND VARIANT_SIZE_PACK_ID = :P_VARIANT_SIZE_PACK_ID
          AND FORECAST_YEAR = :P_FORECAST_YEAR
          AND MONTH = :P_MONTH
          AND FORECAST_METHOD = :P_FORECAST_METHOD
          AND FORECAST_GENERATION_MONTH_DATE = :P_FORECAST_GENERATION_MONTH_DATE
        LIMIT 1;

        IF (V_EXISTS) THEN
            -- Existing forecast - call versioning procedure
            CALL FORECAST.SP_SAVE_FORECAST_VERSION(
                :V_FORECAST_ID, :P_MARKET_NAME, :P_MARKET_CODE, :P_DISTRIBUTOR_NAME,
                :P_DISTRIBUTOR_ID, :P_BRAND, :P_BRAND_ID, :P_VARIANT, :P_VARIANT_ID,
                :P_VARIANT_SIZE_PACK_DESC, :P_VARIANT_SIZE_PACK_ID, :P_FORECAST_YEAR, :P_MONTH, :P_FORECAST_METHOD,
                :P_FORECAST_GENERATION_MONTH_DATE, :P_MANUAL_CASE_EQUIVALENT_VOLUME, :P_USER_ID, :P_FORECAST_STATUS,
                :P_COMMENT
            );
        ELSE
            -- New forecast
            INSERT INTO FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST
            (MARKET_NAME, MARKET_CODE, DISTRIBUTOR_NAME, DISTRIBUTOR_ID,
             BRAND, BRAND_ID, VARIANT, VARIANT_ID, VARIANT_SIZE_PACK_DESC, VARIANT_SIZE_PACK_ID, FORECAST_YEAR,
             MONTH, FORECAST_METHOD, FORECAST_GENERATION_MONTH_DATE, MANUAL_CASE_EQUIVALENT_VOLUME, UPDATED_BY_USER_ID, FORECAST_STATUS, COMMENT, CREATED_BY_USER_ID, CURRENT_VERSION)
            VALUES
            (:P_MARKET_NAME, :P_MARKET_CODE, :P_DISTRIBUTOR_NAME, :P_DISTRIBUTOR_ID,
             :P_BRAND, :P_BRAND_ID, :P_VARIANT, :P_VARIANT_ID, :P_VARIANT_SIZE_PACK_DESC, :P_VARIANT_SIZE_PACK_ID, :P_FORECAST_YEAR,
             :P_MONTH, :P_FORECAST_METHOD, :P_FORECAST_GENERATION_MONTH_DATE, :P_MANUAL_CASE_EQUIVALENT_VOLUME, :P_USER_ID, :P_FORECAST_STATUS, :P_COMMENT, :P_USER_ID, 1);
            
            V_FORECAST_ID := LAST_INSERT_ID();

            -- Initialize version history
            INSERT INTO FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS
            (FORECAST_ID, VERSION_NUMBER, MARKET_NAME, MARKET_CODE, DISTRIBUTOR_NAME, DISTRIBUTOR_ID,
             BRAND, BRAND_ID, VARIANT, VARIANT_ID, VARIANT_SIZE_PACK_DESC, VARIANT_SIZE_PACK_ID, FORECAST_YEAR, MONTH, FORECAST_METHOD, FORECAST_GENERATION_MONTH_DATE,
             MANUAL_CASE_EQUIVALENT_VOLUME, UPDATED_BY_USER_ID, FORECAST_STATUS, COMMENT)
            VALUES
            (:V_FORECAST_ID, 1, :P_MARKET_NAME, :P_MARKET_CODE, :P_DISTRIBUTOR_NAME, :P_DISTRIBUTOR_ID,
             :P_BRAND, :P_BRAND_ID, :P_VARIANT, :P_VARIANT_ID, :P_VARIANT_SIZE_PACK_DESC, :P_VARIANT_SIZE_PACK_ID, :P_FORECAST_YEAR, :P_MONTH, :P_FORECAST_METHOD, :P_FORECAST_GENERATION_MONTH_DATE,
             :P_MANUAL_CASE_EQUIVALENT_VOLUME, :P_USER_ID, :P_FORECAST_STATUS, :P_COMMENT);
        END IF;

        UPDATE FORECAST.DEPLETIONS_FORECAST_PRIMARY_FORECAST_METHOD
        SET FORECAST_METHOD = :P_FORECAST_METHOD
        WHERE MARKET_CODE = :P_MARKET_CODE
          AND DISTRIBUTOR_ID = :P_DISTRIBUTOR_ID
          AND VARIANT_SIZE_PACK_ID = :P_VARIANT_SIZE_PACK_ID
          AND FORECAST_GENERATION_MONTH_DATE = :P_FORECAST_GENERATION_MONTH_DATE;

        COMMIT;
        RETURN 'SUCCESS: Forecast saved for ID ' || V_FORECAST_ID;
    EXCEPTION
        WHEN OTHER THEN
            ROLLBACK;
            RAISE; -- Re-raise to fail the procedure call
    END;
END;
$$;

COMMENT ON PROCEDURE FORECAST.SP_SMART_SAVE_FORECAST(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, INTEGER, VARCHAR, DATE, NUMBER, VARCHAR, VARCHAR, VARCHAR) IS
'Saves a forecast. If it exists, versions it by calling SAVE_FORECAST_VERSION. Otherwise, inserts new forecast and initial version. Updates primary forecast method.
Depends on SAVE_FORECAST_VERSION.';

-- Example Usage (after dependencies are created):
-- CALL FORECAST.SP_SMART_SAVE_FORECAST('Market Name', 'MKT01', 'Dist Name', 'DIST01', 'Brand Name', 'B01', 'Variant Name', 'V01', 'VSP Desc', 'VSP01', 2025, 1, 'three_month', '2025-01-01', 100.0, 'user123', 'draft', 'Initial comment'); 