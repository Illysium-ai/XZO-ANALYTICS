
BEGIN
    LET create_sequence_sql VARCHAR := 'CREATE OR REPLACE SEQUENCE FORECAST.SEQ_MANUAL_FORECAST_CHAINS_ID START = 1 INCREMENT = 1 ORDER';
    EXECUTE IMMEDIATE create_sequence_sql;
    RETURN create_sequence_sql;
END;

CREATE OR REPLACE HYBRID TABLE FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS (
    ID INTEGER PRIMARY KEY DEFAULT FORECAST.SEQ_MANUAL_FORECAST_CHAINS_ID.NEXTVAL,
    MARKET_NAME VARCHAR(100),
    MARKET_CODE VARCHAR(50),
    DISTRIBUTOR_NAME VARCHAR(100),
    DISTRIBUTOR_ID VARCHAR(50),
    PARENT_CHAIN_NAME VARCHAR(100),
    PARENT_CHAIN_CODE VARCHAR(50),
    BRAND VARCHAR(100),
    BRAND_ID VARCHAR(50),
    VARIANT VARCHAR(100),
    VARIANT_ID VARCHAR(50),
    VARIANT_SIZE_PACK_DESC VARCHAR(100),
    VARIANT_SIZE_PACK_ID VARCHAR(50),
    FORECAST_YEAR INTEGER,
    MONTH INTEGER,
    MANUAL_CASE_EQUIVALENT_VOLUME FLOAT,
    UPDATED_BY_USER_ID VARCHAR(50),
    FORECAST_STATUS VARCHAR(50),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    CURRENT_VERSION INTEGER DEFAULT 1,
    COMMENT TEXT,
    INDEX idx_manual_forecast_chains_keys (MARKET_CODE, DISTRIBUTOR_ID, PARENT_CHAIN_CODE, VARIANT_SIZE_PACK_ID, FORECAST_YEAR, MONTH),
    CONSTRAINT UQ_MANUAL_FORECAST_KEY_FGMD UNIQUE (MARKET_CODE, DISTRIBUTOR_ID, PARENT_CHAIN_CODE, VARIANT_SIZE_PACK_ID, FORECAST_YEAR, MONTH)
);

BEGIN
    LET create_sequence_sql VARCHAR := 'CREATE OR REPLACE SEQUENCE FORECAST.SEQ_MANUAL_FORECAST_CHAINS_VERSIONS_ID START = 1 INCREMENT = 1 ORDER';
    EXECUTE IMMEDIATE create_sequence_sql;
    RETURN create_sequence_sql;
END;

CREATE OR REPLACE HYBRID TABLE FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS_VERSIONS (
    VERSION_ID INTEGER PRIMARY KEY DEFAULT FORECAST.SEQ_MANUAL_FORECAST_CHAINS_VERSIONS_ID.NEXTVAL,
    FORECAST_ID INTEGER NOT NULL,
    VERSION_NUMBER INTEGER NOT NULL,
    MARKET_NAME VARCHAR(100),
    MARKET_CODE VARCHAR(50),
    DISTRIBUTOR_NAME VARCHAR(100),
    DISTRIBUTOR_ID VARCHAR(50),
    PARENT_CHAIN_NAME VARCHAR(100),
    PARENT_CHAIN_CODE VARCHAR(50),
    BRAND VARCHAR(100),
    BRAND_ID VARCHAR(50),
    VARIANT VARCHAR(100),
    VARIANT_ID VARCHAR(50),
    VARIANT_SIZE_PACK_DESC VARCHAR(100),
    VARIANT_SIZE_PACK_ID VARCHAR(50),
    FORECAST_YEAR INTEGER,
    MONTH INTEGER,
    MANUAL_CASE_EQUIVALENT_VOLUME FLOAT,
    UPDATED_BY_USER_ID VARCHAR(50),
    FORECAST_STATUS VARCHAR(50),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    COMMENT TEXT,
    FOREIGN KEY (FORECAST_ID) REFERENCES FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS(ID),
    INDEX idx_manual_forecast_chains_versions_id_version (FORECAST_ID, VERSION_NUMBER)
);

-- Step 2: Create sequence
BEGIN
    LET create_sequence_sql VARCHAR := 'CREATE OR REPLACE SEQUENCE FORECAST.SEQ_PUBLISHED_FORECASTS_CHAINS_ID START = 1 INCREMENT = 1 ORDER';
    EXECUTE IMMEDIATE create_sequence_sql;
    RETURN create_sequence_sql;
END;

-- Step 3: Create final table
CREATE OR REPLACE TABLE FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS (
    ID BIGINT PRIMARY KEY DEFAULT FORECAST.SEQ_PUBLISHED_FORECASTS_CHAINS_ID.NEXTVAL,
    GROUP_ID INTEGER,
    PUBLICATION_ID INTEGER NOT NULL,
    SOURCE_TABLE VARCHAR(50) NOT NULL,
    SOURCE_ID INTEGER,
    MARKET_NAME VARCHAR(100),
    MARKET_CODE VARCHAR(50) NOT NULL,
    DISTRIBUTOR_NAME VARCHAR(100),
    DISTRIBUTOR_ID VARCHAR(50) NOT NULL,
    PARENT_CHAIN_NAME VARCHAR(100),
    PARENT_CHAIN_CODE VARCHAR(50) NOT NULL, 
    BRAND VARCHAR(100),
    BRAND_ID VARCHAR(50),
    VARIANT VARCHAR(100),
    VARIANT_ID VARCHAR(50),
    VARIANT_SIZE_PACK_DESC VARCHAR(100),
    VARIANT_SIZE_PACK_ID VARCHAR(50) NOT NULL,
    FORECAST_YEAR INTEGER NOT NULL,
    MONTH INTEGER NOT NULL,
    FORECAST_METHOD VARCHAR(50) NOT NULL,
    FORECAST_GENERATION_MONTH_DATE DATE NOT NULL,
    CASE_EQUIVALENT_VOLUME FLOAT NOT NULL,
    VERSION_NUMBER INTEGER,
    PUBLISHED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
)
CLUSTER BY (FORECAST_GENERATION_MONTH_DATE, MARKET_CODE, FORECAST_METHOD);