-- Snowflake Stored Procedure for save_forecast_version
-- Target Schema: APOLLO_WILLIAMGRANT.FORECAST


CREATE OR REPLACE PROCEDURE FORECAST.SP_SAVE_FORECAST_VERSION(
    P_FORECAST_ID INTEGER,
    P_MARKET_NAME VARCHAR,
    P_MARKET_CODE VARCHAR,
    P_DISTRIBUTOR_NAME VARCHAR,
    P_DISTRIBUTOR_ID VARCHAR,
    P_BRAND VARCHAR,
    P_BRAND_ID VARCHAR,
    P_VARIANT VARCHAR,
    P_VARIANT_ID VARCHAR,
    P_VARIANT_SIZE_PACK_DESC VARCHAR,
    P_VARIANT_SIZE_PACK_ID VARCHAR,
    P_FORECAST_YEAR INTEGER,
    P_MONTH INTEGER,
    P_FORECAST_METHOD VARCHAR,
    P_FORECAST_GENERATION_MONTH_DATE DATE,
    P_MANUAL_CASE_EQUIVALENT_VOLUME NUMBER,
    P_USER_ID VARCHAR,
    P_FORECAST_STATUS VARCHAR,
    P_COMMENT VARCHAR DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE SQL
AS
$$
DECLARE
    -- Exception
    forecast_published_ex EXCEPTION (-20071, 'Cannot save version; the forecast has been published.');

    -- Variables
    NEW_VERSION INTEGER;
BEGIN
    -- Do not allow edits if the forecast's market is already published
    IF (FORECAST.UDF_IS_DEPLETIONS_FORECAST_PUBLISHED(:P_MARKET_CODE, :P_FORECAST_GENERATION_MONTH_DATE)) THEN
        RAISE forecast_published_ex;
    END IF;

    BEGIN TRANSACTION;
    -- Get the next version number
    SELECT COALESCE(MAX(VERSION_NUMBER), 0) + 1 INTO :NEW_VERSION
    FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS
    WHERE FORECAST_ID = :P_FORECAST_ID;
    
    -- Insert the new version into history
    INSERT INTO FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS (
        FORECAST_ID, VERSION_NUMBER, MARKET_NAME, MARKET_CODE, 
        DISTRIBUTOR_NAME, DISTRIBUTOR_ID, BRAND, BRAND_ID, VARIANT, VARIANT_ID,
        VARIANT_SIZE_PACK_DESC, VARIANT_SIZE_PACK_ID, FORECAST_YEAR, MONTH, FORECAST_METHOD, FORECAST_GENERATION_MONTH_DATE, MANUAL_CASE_EQUIVALENT_VOLUME,
        UPDATED_BY_USER_ID, FORECAST_STATUS, COMMENT, CREATED_AT
    ) VALUES (
        :P_FORECAST_ID, :NEW_VERSION, :P_MARKET_NAME, :P_MARKET_CODE,
        :P_DISTRIBUTOR_NAME, :P_DISTRIBUTOR_ID, :P_BRAND, :P_BRAND_ID, :P_VARIANT, :P_VARIANT_ID,
        :P_VARIANT_SIZE_PACK_DESC, :P_VARIANT_SIZE_PACK_ID, :P_FORECAST_YEAR, :P_MONTH, :P_FORECAST_METHOD, :P_FORECAST_GENERATION_MONTH_DATE, :P_MANUAL_CASE_EQUIVALENT_VOLUME,
        :P_USER_ID, :P_FORECAST_STATUS, :P_COMMENT, CURRENT_TIMESTAMP()
    );
    
    -- Update the current forecast with the latest version
    UPDATE FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST SET 
        MARKET_NAME = :P_MARKET_NAME,
        MARKET_CODE = :P_MARKET_CODE,
        DISTRIBUTOR_NAME = :P_DISTRIBUTOR_NAME,
        DISTRIBUTOR_ID = :P_DISTRIBUTOR_ID,
        BRAND = :P_BRAND,
        BRAND_ID = :P_BRAND_ID,
        VARIANT = :P_VARIANT,
        VARIANT_ID = :P_VARIANT_ID,
        VARIANT_SIZE_PACK_DESC = :P_VARIANT_SIZE_PACK_DESC,
        VARIANT_SIZE_PACK_ID = :P_VARIANT_SIZE_PACK_ID,
        FORECAST_YEAR = :P_FORECAST_YEAR,
        MONTH = :P_MONTH,
        FORECAST_METHOD = :P_FORECAST_METHOD,
        FORECAST_GENERATION_MONTH_DATE = :P_FORECAST_GENERATION_MONTH_DATE,
        MANUAL_CASE_EQUIVALENT_VOLUME = :P_MANUAL_CASE_EQUIVALENT_VOLUME,
        UPDATED_BY_USER_ID = :P_USER_ID,
        FORECAST_STATUS = :P_FORECAST_STATUS,
        CURRENT_VERSION = :NEW_VERSION,
        UPDATED_AT = CURRENT_TIMESTAMP(),
        COMMENT = :P_COMMENT
    WHERE ID = :P_FORECAST_ID;
    
    COMMIT;
    RETURN NEW_VERSION;
EXCEPTION
    WHEN OTHER THEN
        ROLLBACK;
        RAISE; -- Re-throw the exception to the calling procedure
END;
$$;

COMMENT ON PROCEDURE FORECAST.SP_SAVE_FORECAST_VERSION(INTEGER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, INTEGER, VARCHAR, DATE, NUMBER, VARCHAR, VARCHAR, VARCHAR) IS
'Saves a new version of an existing forecast into the versions history table and updates the main forecast table with these new details and increments the version number.';

-- Example Usage:
-- CALL FORECAST.SP_SAVE_FORECAST_VERSION(existing_forecast_id, 'Market', 'MKT01', ..., 'Updated comment'); 