
CREATE OR REPLACE PROCEDURE FORECAST.SP_SYNC_PLANNED_PRODUCTS_REALTIME(
  P_VARIANT_SIZE_PACK_IDS ARRAY,
  P_UPDATED_BY_USER_ID VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
DECLARE
  V_FGMD DATE;
  V_BUDGET DATE;
  V_MSG VARCHAR;
BEGIN
  -- Resolve anchors
  SELECT FORECAST.UDF_GET_VALID_FORECAST_GENERATION_MONTH_DATE() INTO :V_FGMD;
  SELECT MAX(BUDGET_CYCLE_DATE) INTO :V_BUDGET
  FROM FORECAST.DEPLETIONS_BUDGET_GENERATED b
  WHERE NOT FORECAST.UDF_IS_BUDGET_APPROVED(b.BUDGET_CYCLE_DATE);

  -- Safety: empty input returns fast
  IF (P_VARIANT_SIZE_PACK_IDS IS NULL OR ARRAY_SIZE(P_VARIANT_SIZE_PACK_IDS) = 0) THEN
    RETURN 'NOOP: No VSP IDs provided.';
  END IF;

  -- =====================
  -- Purge universe and deletes
  -- =====================
  DELETE FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT d
  WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
    AND EXISTS (
      SELECT 1
      FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
      JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
        ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
      WHERE t.VARIANT_SIZE_PACK_ID = d.VARIANT_SIZE_PACK_ID
        AND (
          LOWER(t.IS_PLANNED) = 'false'
          OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(d.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
          OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
                ARRAY_CONTAINS(d.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
             OR ARRAY_CONTAINS(LEFT(d.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
          ))
        )
    );

  DELETE FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT_CHAINS d
  WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
    AND EXISTS (
      SELECT 1
      FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
      JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
        ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
      WHERE t.VARIANT_SIZE_PACK_ID = d.VARIANT_SIZE_PACK_ID
        AND (
          LOWER(t.IS_PLANNED) = 'false'
          OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(d.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
          OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
                ARRAY_CONTAINS(d.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
             OR ARRAY_CONTAINS(LEFT(d.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
          ))
        )
    );

  -- NOTE: Manual inputs do not need to be deleted as they require matching forecast records to be inserted into publications or budgets
  -- Manual inputs (forecast)
  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS v
  -- WHERE v.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = v.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(v.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(v.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(v.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST f
  -- WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(f.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(f.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(f.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS_CHAINS v
  -- WHERE v.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = v.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(v.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(v.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(v.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS f
  -- WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(f.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(f.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(f.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- NOTE: Budget purges are not needed as they are regenerated when planned products are updated
  -- Budget purges
  -- DELETE FROM FORECAST.DEPLETIONS_BUDGET_GENERATED b
  -- WHERE b.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = b.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(b.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(b.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(b.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- NOTE: Manual inputs do not need to be deleted as they require matching forecast records to be inserted into publications or budgets
  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_BUDGET_VERSIONS b
  -- WHERE b.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = b.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(b.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(b.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(b.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_BUDGET b
  -- WHERE b.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = b.VARIANT_SIZE_PACK_ID
  --       AND (
  --         LOWER(t.IS_PLANNED) = 'false'
  --         OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(b.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
  --         OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
  --               ARRAY_CONTAINS(b.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --            OR ARRAY_CONTAINS(LEFT(b.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
  --         ))
  --       )
  --   );

  -- Primary methods purge
  DELETE FROM FORECAST.DEPLETIONS_FORECAST_PRIMARY_FORECAST_METHOD pm
  WHERE pm.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
    AND EXISTS (
      SELECT 1
      FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
      JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
        ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
      WHERE t.VARIANT_SIZE_PACK_ID = pm.VARIANT_SIZE_PACK_ID
        AND (
          LOWER(t.IS_PLANNED) = 'false'
          OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(pm.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
          OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
                ARRAY_CONTAINS(pm.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
             OR ARRAY_CONTAINS(LEFT(pm.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
          ))
        )
    );

  DELETE FROM FORECAST.DEPLETIONS_FORECAST_PRIMARY_FORECAST_METHOD_CHAINS pmc
  WHERE EXISTS (
    SELECT 1
    FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
    JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
      ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
    WHERE t.VARIANT_SIZE_PACK_ID = pmc.VARIANT_SIZE_PACK_ID
      AND (
        LOWER(t.IS_PLANNED) = 'false'
        OR (ARRAY_SIZE(t.MARKET_CODE_EXCLUSIONS) > 0 AND ARRAY_CONTAINS(pmc.MARKET_CODE::VARIANT, t.MARKET_CODE_EXCLUSIONS))
        OR (ARRAY_SIZE(t.CUSTOMER_ID_EXCLUSIONS) > 0 AND (
              ARRAY_CONTAINS(pmc.DISTRIBUTOR_ID::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
           OR ARRAY_CONTAINS(LEFT(pmc.DISTRIBUTOR_ID, 5)::VARIANT, t.CUSTOMER_ID_EXCLUSIONS)
        ))
      )
  );

  -- NOTE: Manual inputs do not need to be deleted as they require matching forecast records to be inserted into publications or budgets
  -- -- Manual inputs tied to zero-seeded rows for 'default' (method-agnostic)
  -- -- Forecast (base) versions first, then current rows
  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS v
  -- WHERE v.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST f
  --     JOIN FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT d
  --       ON d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --      AND d.MARKET_CODE = f.MARKET_CODE
  --      AND d.DISTRIBUTOR_ID = f.DISTRIBUTOR_ID
  --      AND d.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --      AND d.FORECAST_YEAR = f.FORECAST_YEAR
  --      AND d.MONTH = f.MONTH
  --      AND d.DATA_SOURCE = 'zero_seeded'
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --       AND v.FORECAST_ID = f.ID
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST f
  -- WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT d
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --       AND d.MARKET_CODE = f.MARKET_CODE
  --       AND d.DISTRIBUTOR_ID = f.DISTRIBUTOR_ID
  --       AND d.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --       AND d.FORECAST_YEAR = f.FORECAST_YEAR
  --       AND d.MONTH = f.MONTH
  --       AND d.DATA_SOURCE = 'zero_seeded'
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- -- Forecast (chains) versions first, then current rows
  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_VERSIONS_CHAINS v
  -- WHERE v.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS f
  --     JOIN FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT_CHAINS d
  --       ON d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --      AND d.MARKET_CODE = f.MARKET_CODE
  --      AND d.DISTRIBUTOR_ID = f.DISTRIBUTOR_ID
  --      AND d.PARENT_CHAIN_CODE = f.PARENT_CHAIN_CODE
  --      AND d.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --      AND d.FORECAST_YEAR = f.FORECAST_YEAR
  --      AND d.MONTH = f.MONTH
  --      AND d.DATA_SOURCE = 'zero_seeded'
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --       AND v.FORECAST_ID = f.ID
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST_CHAINS f
  -- WHERE f.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT_CHAINS d
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --     WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --       AND d.MARKET_CODE = f.MARKET_CODE
  --       AND d.DISTRIBUTOR_ID = f.DISTRIBUTOR_ID
  --       AND d.PARENT_CHAIN_CODE = f.PARENT_CHAIN_CODE
  --       AND d.VARIANT_SIZE_PACK_ID = f.VARIANT_SIZE_PACK_ID
  --       AND d.FORECAST_YEAR = f.FORECAST_YEAR
  --       AND d.MONTH = f.MONTH
  --       AND d.DATA_SOURCE = 'zero_seeded'
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- -- Budget manual inputs (versions then current) tied to zero_seeded rows
  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_BUDGET_VERSIONS v
  -- WHERE v.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.DEPLETIONS_BUDGET_GENERATED g
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = g.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = g.VARIANT_SIZE_PACK_ID
  --     WHERE g.BUDGET_CYCLE_DATE = :V_BUDGET
  --       AND g.MARKET_CODE = v.MARKET_CODE
  --       AND g.DISTRIBUTOR_ID = v.DISTRIBUTOR_ID
  --       AND g.VARIANT_SIZE_PACK_ID = v.VARIANT_SIZE_PACK_ID
  --       AND g.FORECAST_YEAR = v.FORECAST_YEAR
  --       AND g.MONTH = v.MONTH
  --       AND g.DATA_SOURCE = 'zero_seeded'
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- DELETE FROM FORECAST.MANUAL_INPUT_DEPLETIONS_BUDGET b
  -- WHERE b.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM FORECAST.DEPLETIONS_BUDGET_GENERATED g
  --     JOIN MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --       ON t.VARIANT_SIZE_PACK_ID = g.VARIANT_SIZE_PACK_ID
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID
  --           FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = g.VARIANT_SIZE_PACK_ID
  --     WHERE g.BUDGET_CYCLE_DATE = :V_BUDGET
  --       AND g.MARKET_CODE = b.MARKET_CODE
  --       AND g.DISTRIBUTOR_ID = b.DISTRIBUTOR_ID
  --       AND g.VARIANT_SIZE_PACK_ID = b.VARIANT_SIZE_PACK_ID
  --       AND g.FORECAST_YEAR = b.FORECAST_YEAR
  --       AND g.MONTH = b.MONTH
  --       AND g.DATA_SOURCE = 'zero_seeded'
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- Additional selective purges for 'default' state (remove zero_seeded only)
  DELETE FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT d
  WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
    AND d.DATA_SOURCE = 'zero_seeded'
    AND EXISTS (
      SELECT 1
      FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
      JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
        ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
      WHERE t.VARIANT_SIZE_PACK_ID = d.VARIANT_SIZE_PACK_ID
        AND LOWER(t.IS_PLANNED) = 'default'
    );

  DELETE FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT_CHAINS d
  WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
    AND d.DATA_SOURCE = 'zero_seeded'
    AND EXISTS (
      SELECT 1
      FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
      JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
        ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
      WHERE t.VARIANT_SIZE_PACK_ID = d.VARIANT_SIZE_PACK_ID
        AND LOWER(t.IS_PLANNED) = 'default'
    );

  -- DELETE FROM FORECAST.DEPLETIONS_BUDGET_GENERATED b
  -- WHERE b.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND b.DATA_SOURCE = 'zero_seeded'
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = b.VARIANT_SIZE_PACK_ID
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   );

  -- Budget primary method purge for 'default' (keep only if any budget rows remain)
  -- DELETE FROM FORECAST.DEPLETIONS_BUDGET_PRIMARY_METHOD bpm
  -- WHERE bpm.BUDGET_CYCLE_DATE = :V_BUDGET
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = bpm.VARIANT_SIZE_PACK_ID
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   )
  --   AND NOT EXISTS (
  --     SELECT 1 FROM FORECAST.DEPLETIONS_BUDGET_GENERATED g
  --     WHERE g.BUDGET_CYCLE_DATE = :V_BUDGET
  --       AND g.MARKET_CODE = bpm.MARKET_CODE
  --       AND g.DISTRIBUTOR_ID = bpm.DISTRIBUTOR_ID
  --       AND g.VARIANT_SIZE_PACK_ID = bpm.VARIANT_SIZE_PACK_ID
  --   );

  -- DELETE FROM FORECAST.DEPLETIONS_FORECAST_PRIMARY_FORECAST_METHOD pm
  -- WHERE pm.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --   AND EXISTS (
  --     SELECT 1
  --     FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --     JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --       ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --     WHERE t.VARIANT_SIZE_PACK_ID = pm.VARIANT_SIZE_PACK_ID
  --       AND LOWER(t.IS_PLANNED) = 'default'
  --   )
  --   AND NOT EXISTS (
  --     SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT d
  --     WHERE d.FORECAST_GENERATION_MONTH_DATE = :V_FGMD
  --       AND d.MARKET_CODE = pm.MARKET_CODE
  --       AND d.DISTRIBUTOR_ID = pm.DISTRIBUTOR_ID
  --       AND d.VARIANT_SIZE_PACK_ID = pm.VARIANT_SIZE_PACK_ID
  --   );

  -- DELETE FROM FORECAST.DEPLETIONS_FORECAST_PRIMARY_FORECAST_METHOD_CHAINS pmc
  -- WHERE EXISTS (
  --   SELECT 1
  --   FROM MASTER_DATA.APOLLO_VARIANT_SIZE_PACK_TAG t
  --   JOIN (SELECT VALUE::VARCHAR AS VARIANT_SIZE_PACK_ID FROM TABLE(FLATTEN(INPUT => :P_VARIANT_SIZE_PACK_IDS))) i
  --     ON i.VARIANT_SIZE_PACK_ID = t.VARIANT_SIZE_PACK_ID
  --   WHERE t.VARIANT_SIZE_PACK_ID = pmc.VARIANT_SIZE_PACK_ID
  --     AND LOWER(t.IS_PLANNED) = 'default'
  -- )
  -- AND NOT EXISTS (
  --   SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_INIT_DRAFT_CHAINS d
  --   WHERE d.MARKET_CODE = pmc.MARKET_CODE
  --     AND d.DISTRIBUTOR_ID = pmc.DISTRIBUTOR_ID
  --     AND d.PARENT_CHAIN_CODE = pmc.PARENT_CHAIN_CODE
  --     AND d.VARIANT_SIZE_PACK_ID = pmc.VARIANT_SIZE_PACK_ID
  -- );

  -- =====================
  -- Budget regeneration (only if an open cycle exists)
  -- =====================
  IF (V_BUDGET IS NOT NULL) THEN
    CALL FORECAST.SP_GENERATE_BUDGET(:V_BUDGET, :P_UPDATED_BY_USER_ID);
  END IF;

  RETURN 'SUCCESS: realtime sync complete (purges done).';
END;
$$;
