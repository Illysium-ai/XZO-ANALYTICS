-- Chains Publishing Workflow - Test Market Unpublishing
-- Tests chains unpublishing during market-level unpublish operations

USE DATABASE APOLLO_DEVELOPMENT;

-- =========================================
-- PRE-TEST SETUP
-- =========================================

SELECT 'ðŸ§ª TESTING CHAINS MARKET UNPUBLISHING' AS TEST_NAME;

-- Get current FGMD for testing
SET CURRENT_FGMD = (SELECT FORECAST.UDF_GET_VALID_FORECAST_GENERATION_MONTH_DATE());

-- Re-publish test divisions to have data to unpublish
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'Independent Franchise', 'review', 'Setup for market unpublish test');
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'Independent Franchise', 'consensus', 'Promote to consensus for market unpublish test');
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'BBG and Control', 'review', 'Setup for market unpublish test');
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'BBG and Control', 'consensus', 'Promote to consensus for market unpublish test');

-- Verify we have published data for both markets
SELECT 
    'CORE_PUBLISHED_SETUP' AS TYPE, MARKET_CODE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
GROUP BY MARKET_CODE

UNION ALL

SELECT 
    'CHAINS_PUBLISHED_SETUP' AS TYPE, MARKET_CODE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
GROUP BY MARKET_CODE

ORDER BY TYPE, MARKET_CODE;

-- =========================================
-- TEST 1: SINGLE MARKET UNPUBLISH
-- =========================================

SELECT 'ðŸ§ª TEST 1: Single Market Unpublish (USANY1)' AS TEST_NAME;

-- Count published forecasts before market unpublish
SELECT 
    'TOTAL_CORE_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'TOTAL_CHAINS_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'MKT001_CORE_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'MKT001_CHAINS_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- Execute market unpublish for TEST_MKT_001
CALL FORECAST.SP_UNPUBLISH_MARKET_FORECAST('USANY1', $CURRENT_FGMD, 'test_user', 'Test market unpublish with chains');

-- Count published forecasts after market unpublish
SELECT 
    'TOTAL_CORE_AFTER' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'TOTAL_CHAINS_AFTER' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'MKT001_CORE_AFTER' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'MKT001_CHAINS_AFTER' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'MKT002_CORE_REMAINING' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE = 'USAPA1'

UNION ALL

SELECT 
    'MKT002_CHAINS_REMAINING' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE = 'USAPA1';

-- =========================================
-- TEST 2: VERIFY PUBLICATION STATUS CHANGES
-- =========================================

SELECT 'ðŸ§ª TEST 2: Verify Publication Status Changes' AS TEST_NAME;

-- Check publication status for both markets
SELECT 
    p.MARKET_CODE, p.PUBLICATION_STATUS, p.PUBLISHED_BY_USER_ID,
    g.DIVISION, g.GROUP_STATUS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p
JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g ON p.GROUP_ID = g.GROUP_ID
WHERE p.MARKET_CODE IN ('USANY1', 'USAPA1')
ORDER BY p.MARKET_CODE;

-- Verify manual input forecast status for unpublished market
SELECT 
    'MKT001_MANUAL_STATUS' AS TYPE, FORECAST_STATUS, COUNT(*) AS COUNT
FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
AND FORECAST_GENERATION_MONTH_DATE = $CURRENT_FGMD
GROUP BY FORECAST_STATUS

UNION ALL

SELECT 
    'MKT002_MANUAL_STATUS' AS TYPE, FORECAST_STATUS, COUNT(*) AS COUNT
FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST 
WHERE MARKET_CODE = 'USAPA1'
AND FORECAST_GENERATION_MONTH_DATE = $CURRENT_FGMD
GROUP BY FORECAST_STATUS

ORDER BY TYPE, FORECAST_STATUS;

-- =========================================
-- TEST 3: VERIFY CHAINS SPECIFIC CLEANUP
-- =========================================

SELECT 'ðŸ§ª TEST 3: Verify Chains Specific Cleanup' AS TEST_NAME;

-- Check remaining chains published forecasts by market
SELECT 
    MARKET_CODE, SOURCE_TABLE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
GROUP BY MARKET_CODE, SOURCE_TABLE
ORDER BY MARKET_CODE, SOURCE_TABLE;

-- Verify no orphaned chains records for unpublished market
SELECT COUNT(*) AS ORPHANED_CHAINS_MKT001
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS c
WHERE c.MARKET_CODE = 'USANY1'
AND NOT EXISTS (
    SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p 
    WHERE p.PUBLICATION_ID = c.PUBLICATION_ID 
    AND p.PUBLICATION_STATUS IN ('review', 'consensus')
);

-- Show remaining chains forecasts for TEST_MKT_002 (should still exist)
SELECT 
    c.SOURCE_TABLE, c.PARENT_CHAIN_CODE, c.FORECAST_YEAR, c.MONTH,
    c.CASE_EQUIVALENT_VOLUME, p.PUBLICATION_STATUS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS c
JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p ON c.PUBLICATION_ID = p.PUBLICATION_ID
WHERE c.MARKET_CODE = 'USAPA1'
ORDER BY c.SOURCE_TABLE, c.PARENT_CHAIN_CODE;

-- =========================================
-- TEST 4: GROUP STATUS HANDLING
-- =========================================

SELECT 'ðŸ§ª TEST 4: Verify Group Status Handling' AS TEST_NAME;

-- Check if publication group is still active (should be, since TEST_MKT_002 is still published)
SELECT 
    g.DIVISION, g.GROUP_STATUS,
    COUNT(p.PUBLICATION_ID) AS TOTAL_PUBLICATIONS,
    COUNT(CASE WHEN p.PUBLICATION_STATUS IN ('review', 'consensus') THEN 1 END) AS ACTIVE_PUBLICATIONS,
    COUNT(CASE WHEN p.PUBLICATION_STATUS = 'unpublished' THEN 1 END) AS UNPUBLISHED_PUBLICATIONS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g
LEFT JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p ON g.GROUP_ID = p.GROUP_ID
WHERE g.DIVISION IN ('Independent Franchise', 'BBG and Control')
AND g.FORECAST_GENERATION_MONTH_DATE = $CURRENT_FGMD
GROUP BY g.DIVISION, g.GROUP_STATUS;

-- =========================================
-- TEST 5: UNPUBLISH SECOND MARKET (USAPA1)
-- =========================================

SELECT 'ðŸ§ª TEST 5: Unpublish Second Market (USAPA1)' AS TEST_NAME;

-- Count before unpublishing second market
SELECT 
    'BEFORE_SECOND_MARKET' AS PHASE,
    'CORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE = 'USAPA1'

UNION ALL

SELECT 
    'BEFORE_SECOND_MARKET' AS PHASE,
    'CHAINS' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE = 'USAPA1';

-- Unpublish the second market
CALL FORECAST.SP_UNPUBLISH_MARKET_FORECAST('USAPA1', $CURRENT_FGMD, 'test_user', 'Unpublish second market');

-- Count after unpublishing second market
SELECT 
    'AFTER_SECOND_MARKET' AS PHASE,
    'CORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE = 'USAPA1'

UNION ALL

SELECT 
    'AFTER_SECOND_MARKET' AS PHASE,
    'CHAINS' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE = 'USAPA1';

-- Check group status after all markets unpublished (should be inactive now)
SELECT 
    g.DIVISION, g.GROUP_STATUS,
    COUNT(p.PUBLICATION_ID) AS TOTAL_PUBLICATIONS,
    COUNT(CASE WHEN p.PUBLICATION_STATUS IN ('review', 'consensus') THEN 1 END) AS ACTIVE_PUBLICATIONS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g
LEFT JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p ON g.GROUP_ID = p.GROUP_ID
WHERE g.DIVISION IN ('Independent Franchise', 'BBG and Control')
AND g.FORECAST_GENERATION_MONTH_DATE = $CURRENT_FGMD
GROUP BY g.DIVISION, g.GROUP_STATUS;

-- =========================================
-- TEST SUMMARY
-- =========================================

SELECT 'ðŸ“Š MARKET UNPUBLISH TEST SUMMARY' AS SECTION;

-- Final verification - should all be 0
SELECT 
    'FINAL_CORE_PUBLISHED' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'FINAL_CHAINS_PUBLISHED' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'FINAL_ACTIVE_PUBLICATIONS' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
AND PUBLICATION_STATUS IN ('review', 'consensus')

UNION ALL

SELECT 
    'FINAL_ORPHANED_CHAINS' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS c
WHERE c.MARKET_CODE IN ('USANY1', 'USAPA1')
AND NOT EXISTS (
    SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p 
    WHERE p.PUBLICATION_ID = c.PUBLICATION_ID 
    AND p.PUBLICATION_STATUS IN ('review', 'consensus')
);

-- Show final publication statuses
SELECT 
    p.MARKET_CODE, p.PUBLICATION_STATUS, 
    g.GROUP_STATUS, g.DIVISION
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p
JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g ON p.GROUP_ID = g.GROUP_ID
WHERE p.MARKET_CODE IN ('USANY1', 'USAPA1')
ORDER BY p.MARKET_CODE;

COMMIT;

SELECT 'âœ… MARKET UNPUBLISH TESTS COMPLETE' AS STATUS;