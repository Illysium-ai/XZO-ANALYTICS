-- Chains Publishing Workflow - Test Division Unpublishing
-- Tests chains unpublishing during division-level unpublish operations

USE DATABASE APOLLO_DEVELOPMENT;

-- =========================================
-- PRE-TEST VERIFICATION
-- =========================================

SELECT 'ðŸ§ª TESTING CHAINS DIVISION UNPUBLISHING' AS TEST_NAME;

-- Verify we have published data to unpublish (from previous test)
SELECT 
    'CORE_PUBLISHED_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_PUBLISHED_BEFORE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'PUBLICATIONS_ACTIVE' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
AND PUBLICATION_STATUS = 'consensus';

-- Show current publication details
SELECT 
    p.MARKET_CODE, p.PUBLICATION_STATUS, g.DIVISION, g.GROUP_STATUS,
    p.GROUP_ID, p.PUBLICATION_ID
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p
JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g ON p.GROUP_ID = g.GROUP_ID
WHERE p.MARKET_CODE IN ('TEST_MKT_001', 'TEST_MKT_002')
ORDER BY p.MARKET_CODE;

-- =========================================
-- TEST 1: DIVISION UNPUBLISH (BOTH CORE AND CHAINS)
-- =========================================

SELECT 'ðŸ§ª TEST 1: Division Unpublish (Should remove both core and chains)' AS TEST_NAME;

-- Get current FGMD for unpublishing
SET CURRENT_FGMD = (SELECT FORECAST.UDF_GET_VALID_FORECAST_GENERATION_MONTH_DATE());

-- Count published forecasts before unpublishing
SELECT 
    'CORE_BEFORE_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_BEFORE_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- Execute division unpublish
CALL FORECAST.SP_UNPUBLISH_DIVISION_FORECAST('Independent Franchise', $CURRENT_FGMD, 'test_user', 'Test division unpublish with chains');

-- Count published forecasts after unpublishing
SELECT 
    'CORE_AFTER_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_AFTER_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- =========================================
-- TEST 2: VERIFY PUBLICATION STATUS CHANGES
-- =========================================

SELECT 'ðŸ§ª TEST 2: Verify Publication Status Changes' AS TEST_NAME;

-- Check publication status (should be 'unpublished')
SELECT 
    p.MARKET_CODE, p.PUBLICATION_STATUS, p.PUBLISHED_BY_USER_ID,
    g.DIVISION, g.GROUP_STATUS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p
JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g ON p.GROUP_ID = g.GROUP_ID
WHERE p.MARKET_CODE IN ('TEST_MKT_001', 'TEST_MKT_002')
ORDER BY p.MARKET_CODE;

-- Verify manual input forecast status was reset to 'draft'
SELECT 
    MARKET_CODE, FORECAST_STATUS, COUNT(*) AS COUNT
FROM FORECAST.MANUAL_INPUT_DEPLETIONS_FORECAST 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
AND FORECAST_GENERATION_MONTH_DATE = $CURRENT_FGMD
GROUP BY MARKET_CODE, FORECAST_STATUS
ORDER BY MARKET_CODE;

-- =========================================
-- TEST 3: VERIFY NO ORPHANED CHAINS RECORDS
-- =========================================

SELECT 'ðŸ§ª TEST 3: Verify No Orphaned Chains Records' AS TEST_NAME;

-- Should be 0 orphaned chains published forecasts
SELECT COUNT(*) AS ORPHANED_CHAINS_COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS c
WHERE c.MARKET_CODE IN ('TEST_MKT_001', 'TEST_MKT_002')
AND NOT EXISTS (
    SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p 
    WHERE p.PUBLICATION_ID = c.PUBLICATION_ID 
    AND p.PUBLICATION_STATUS IN ('review', 'consensus')
);

-- Verify consistency between core and chains cleanup
SELECT 
    'CORE_REMAINING' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_REMAINING' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- =========================================
-- TEST 4: RE-PUBLISH AND TEST AGAIN
-- =========================================

SELECT 'ðŸ§ª TEST 4: Re-publish and Test Division Unpublish Again' AS TEST_NAME;

-- Re-publish to test unpublishing again
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'Independent Franchise', 'review', 'Re-publish for unpublish test');
CALL FORECAST.SP_PUBLISH_DIVISION_FORECAST($CURRENT_FGMD, 'test_user', 'Independent Franchise', 'consensus', 'Re-promote to consensus');

-- Verify re-publication worked
SELECT 
    'CORE_REPUBLISHED' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_REPUBLISHED' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- Unpublish again to test consistency
CALL FORECAST.SP_UNPUBLISH_DIVISION_FORECAST('Independent Franchise', $CURRENT_FGMD, 'test_user', 'Second unpublish test');

-- Also test unpublishing BBG and Control division
CALL FORECAST.SP_UNPUBLISH_DIVISION_FORECAST('BBG and Control', $CURRENT_FGMD, 'test_user', 'Test BBG and Control division unpublish');

-- Verify second unpublish worked
SELECT 
    'CORE_AFTER_SECOND_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'CHAINS_AFTER_SECOND_UNPUBLISH' AS TYPE, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1');

-- =========================================
-- TEST 5: VERIFY GROUP STATUS HANDLING
-- =========================================

SELECT 'ðŸ§ª TEST 5: Verify Group Status Handling' AS TEST_NAME;

-- Check publication group status (should be inactive if no active publications)
SELECT 
    g.DIVISION, g.GROUP_STATUS, g.FORECAST_GENERATION_MONTH_DATE,
    COUNT(p.PUBLICATION_ID) AS PUBLICATION_COUNT,
    COUNT(CASE WHEN p.PUBLICATION_STATUS IN ('review', 'consensus') THEN 1 END) AS ACTIVE_PUBLICATIONS
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATION_GROUPS g
LEFT JOIN FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p ON g.GROUP_ID = p.GROUP_ID
WHERE g.DIVISION IN ('Independent Franchise', 'BBG and Control')
GROUP BY g.DIVISION, g.GROUP_STATUS, g.FORECAST_GENERATION_MONTH_DATE
ORDER BY g.FORECAST_GENERATION_MONTH_DATE;

-- =========================================
-- TEST SUMMARY
-- =========================================

SELECT 'ðŸ“Š DIVISION UNPUBLISH TEST SUMMARY' AS SECTION;

-- Final verification - should all be 0
SELECT 
    'REMAINING_CORE_PUBLISHED' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'REMAINING_CHAINS_PUBLISHED' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')

UNION ALL

SELECT 
    'ACTIVE_PUBLICATIONS' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS 
WHERE MARKET_CODE IN ('USANY1', 'USAPA1')
AND PUBLICATION_STATUS IN ('review', 'consensus')

UNION ALL

SELECT 
    'ORPHANED_CHAINS' AS METRIC, COUNT(*) AS COUNT
FROM FORECAST.DEPLETIONS_FORECAST_PUBLISHED_FORECASTS_CHAINS c
WHERE c.MARKET_CODE IN ('TEST_MKT_001', 'TEST_MKT_002')
AND NOT EXISTS (
    SELECT 1 FROM FORECAST.DEPLETIONS_FORECAST_PUBLICATIONS p 
    WHERE p.PUBLICATION_ID = c.PUBLICATION_ID 
    AND p.PUBLICATION_STATUS IN ('review', 'consensus')
);

COMMIT;

SELECT 'âœ… DIVISION UNPUBLISH TESTS COMPLETE' AS STATUS;